name: Build, Scan, and Deploy to EKS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  EKS_CLUSTER: ${{ vars.EKS_CLUSTER }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}

jobs:
  Build_and_Push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build and Push Docker image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.REGISTRY }}
          repo: ${{ env.ECR_REPOSITORY }}
          region: ${{ env.AWS_REGION }}
          tags: latest,${{ github.run_number }}
          dockerfile: ./Dockerfile
          context: ./

  Trivy_Scan:
    runs-on: ubuntu-latest
    needs: Build_and_Push
    steps:
      - uses: actions/checkout@v4

      - name: Install Trivy
        run: |
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update -y
          sudo apt-get install -y trivy

      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
          format: sarif
          output: trivy-results.sarif
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}

  deploy_to_kubernetes:
    runs-on: ubuntu-latest
    needs: Trivy_Scan
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4  # Use v4 instead of v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig for EKS
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          kubectl version --client

      - name: Create ECR registry secret
        run: |
          kubectl create secret docker-registry ecr-registry \
            --docker-server=${{ secrets.REGISTRY }} \
            --docker-username=AWS \
            --docker-password=$(aws ecr get-login-password --region ${{ env.AWS_REGION }}) \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create and apply Kubernetes deployment
        run: |
          # Create deployment manifest
          cat > deployment.yaml << EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mini-finance-deployment
  labels:
    app: mini-finance
spec:
  replicas: 2
  selector:
    matchLabels:
      app: mini-finance
  template:
    metadata:
      labels:
        app: mini-finance
    spec:
      containers:
        - name: mini-finance
          image: ${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.run_number }}
          ports:
            - containerPort: 80
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
      imagePullSecrets:
        - name: ecr-registry
---
apiVersion: v1
kind: Service
metadata:
  name: mini-finance-service
spec:
  selector:
    app: mini-finance
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP
EOF

          # Apply the deployment
          kubectl apply -f deployment.yaml

      - name: Wait for deployment to be ready
        run: kubectl rollout status deployment/mini-finance-deployment --timeout=300s

      - name: Show deployment status
        run: |
          echo "=== Deployments ==="
          kubectl get deployments
          echo "=== Services ==="
          kubectl get services
          echo "=== Pods ==="
          kubectl get pods
          echo "=== Ingress ==="
          kubectl get ingress || echo "No ingress found"