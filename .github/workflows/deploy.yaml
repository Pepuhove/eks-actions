name: Build, Scan, and Deploy to EKS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  EKS_CLUSTER: ${{ vars.EKS_CLUSTER }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}

jobs:
  # Sonarqube_scanner:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: SonarQube Scan
  #       uses: sonarsource/sonarqube-scan-action@master
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #         SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  #     - name: SonarQube Quality Gate check
  #       id: sonarqube-quality-gate-check
  #       uses: sonarsource/sonarqube-quality-gate-action@master
  #       with:
  #         pollingTimeoutSec: 600
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #         SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  #     - name: Show Quality Gate Status
  #       run: |
  #         echo "Quality Gate status: ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"

  Build_and_Push:
    runs-on: ubuntu-latest
    # needs: Sonarqube_scanner
    steps:
      - uses: actions/checkout@v4

      - name: Build and Push Docker image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.REGISTRY }}
          repo: ${{ env.ECR_REPOSITORY }}
          region: ${{ env.AWS_REGION }}
          tags: latest,${{ github.run_number }}
          dockerfile: ./Dockerfile
          context: ./

  Trivy_Scan:
    runs-on: ubuntu-latest
    needs: Build_and_Push
    steps:
      - uses: actions/checkout@v4

      - name: Install Trivy
        run: |
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update -y
          sudo apt-get install -y trivy

      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
          format: sarif
          output: trivy-results.sarif
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}

      # - name: Upload Trivy scan results
      #   uses: github/codeql-action/upload-sarif@v3
      #   with:
      #     sarif_file: trivy-results.sarif

  Deploy_to_EKS:
    runs-on: ubuntu-latest
    needs: Trivy_Scan
    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy with Helm using Bitovi action
      uses: bitovi/github-actions-deploy-eks-helm@v1.2.12
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        cluster-name: ${{ env.EKS_CLUSTER }}
        chart-path: helm/appcharts
        namespace: default
        values: |
          appimage=${{ secrets.REGISTRY }}
          apptag=${{ github.run_number }}
          replicaCount=2
          service.type=ClusterIP
          service.port=80
        name: finance-app
        atomic: true
        timeout: 300s

    - name: Create ECR registry secret
      run: |
        # Delete existing secret if it exists
        kubectl delete secret ecr-registry --ignore-not-found
        # Create new secret
        kubectl create secret docker-registry ecr-registry \
          --docker-server=${{ secrets.REGISTRY }} \
          --docker-username=AWS \
          --docker-password=$(aws ecr get-login-password --region ${{ env.AWS_REGION }})

    - name: Show deployment status
      run: |
        echo "=== Cluster Status ==="
        kubectl get nodes
        echo "=== Deployments ==="
        kubectl get deployments -A
        echo "=== Services ==="
        kubectl get svc -A
        echo "=== Pods ==="
        kubectl get pods -A
        echo "=== Ingress ==="
        kubectl get ingress -A || echo "No ingress resources found"
<<<<<<< HEAD
# 
=======
>>>>>>> 699edb9a214ec23af6c143801f851fbdfa02417e
